{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","React","createElement","className","concat","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","role","placeholder","onClick","toggleMode","htmlFor","TextForm","countWords","text","split","filter","word","trim","length","setText","useState","Fragment","style","color","heading","value","backgroundColor","onChange","event","target","rows","handleUpClick","newText","toUpperCase","showAlert","handleDownClick","toLowerCase","handleClearClick","handleCapital","map","charAt","slice","join","handleUpDown","char","index","console","log","handleCopy","document","getElementById","select","navigator","clipboard","writeText","Alert","alert","lower","capitalize","msg","data-bs-dismiss","App","setMode","setAlert","message","setTimeout","about","body","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","window","process","ReactDOM","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.50342e2e.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n// import { a } from 'react-router-dom';\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href=\"/\">{props.title}</a>\r\n        <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-a active\" aria-current=\"page\" href=\"#\">Home</a>\r\n            </li>\r\n            {/* <li className=\"nav-item\">\r\n              <a className=\"nav-link\" href=\"/about\">{props.about}</a>\r\n            </li> */}\r\n          </ul>\r\n          <form className=\"d-flex\" role=\"search\">\r\n            <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n            <button className=\"btn btn-outline-primary\" type=\"submit\">Search</button>\r\n          </form>\r\n          <div className={`form-check form-switch text-${props.mode === 'light' ? 'dark' : 'light'}`}>\r\n            <input className=\"form-check-input mx-1\" type=\"checkbox\" onClick={props.toggleMode} role=\"switch\" id=\"flexSwitchCheckDefault\" />\r\n            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">\r\n              Enable Dark Mode\r\n            </label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  about: PropTypes.string.isRequired,\r\n  mode: PropTypes.string.isRequired,\r\n  toggleMode: PropTypes.func.isRequired,\r\n};\r\n","import React, { useState } from 'react';\r\n\r\nexport default function TextForm(props) {\r\n  const handleUpClick = () => {\r\n    let newText = text.toUpperCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted to uppercase\", \"success\");\r\n  };\r\n\r\n  const handleDownClick = () => {\r\n    let newText = text.toLowerCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted to lowercase\", \"success\");\r\n  };\r\n\r\n  const handleClearClick = () => {\r\n    let newText = \"\";\r\n    setText(newText);\r\n    props.showAlert(\"Cleared text!\", \"success\");\r\n  };\r\n\r\n  const handleCapital = () => {\r\n    let newText = text.split(' ').map(word => {\r\n      return word.charAt(0).toUpperCase() + word.slice(1).toLowerCase();\r\n    }).join(' ');\r\n\r\n    setText(newText);\r\n    props.showAlert(\"Converted to Capital\", \"success\");\r\n  };\r\n\r\n  const handleUpDown = () => {\r\n    let newText = text.split('').map((char, index) => {\r\n      return index % 2 === 0 ? char.toUpperCase() : char.toLowerCase();\r\n    }).join('');\r\n\r\n    setText(newText);\r\n    console.log(newText);\r\n    props.showAlert(\"Converted to Up and down letters\", \"success\");\r\n  };\r\n\r\n  const handleCopy = () => {\r\n    var text = document.getElementById(\"myBox\");\r\n    text.select();\r\n    navigator.clipboard.writeText(text.value);\r\n    props.showAlert(\"Copied text\", \"success\");\r\n  };\r\n\r\n  const handleOnChange = (event) => {\r\n    setText(event.target.value);\r\n  };\r\n\r\n  const countWords = (text) => {\r\n    return text.split(' ').filter(word => word.trim().length > 0).length;\r\n  };\r\n\r\n  const [text, setText] = useState(\"Enter text here\");\r\n  \r\n  return (\r\n    <>\r\n      <div className=\"container\" style={{ color: props.mode === 'dark' ? 'white' : 'black' }}>\r\n        <h1>{props.heading}</h1>\r\n        <div className=\"mb-3\">\r\n          <textarea className=\"form-control\" value={text} style={{ backgroundColor: props.mode === 'dark' ? '#343a40' : '#ffffff', color: props.mode === 'dark' ? 'white' : 'black' }} onChange={handleOnChange} id=\"myBox\" rows=\"10\"></textarea>\r\n        </div>\r\n        <button className=\"btn btn-primary mx-1\" onClick={handleUpClick}>Convert to Uppercase</button>\r\n        <button className=\"btn btn-primary mx-1\" onClick={handleDownClick}>Convert to Lowercase</button>\r\n        <button className=\"btn btn-primary mx-1\" onClick={handleClearClick}>Clear Texts</button>\r\n        <button className=\"btn btn-primary mx-1\" onClick={handleCapital}>Capitalized Texts</button>\r\n        <button className=\"btn btn-primary mx-1\" onClick={handleUpDown}>Up Down Texts</button>\r\n        <button className=\"btn btn-primary mx-1\" onClick={handleCopy}>Copy Text</button>\r\n      </div>\r\n      <div className=\"container my-3\" style={{ color: props.mode === 'dark' ? 'white' : 'black' }}>\r\n        <h1>Text Summary:</h1>\r\n        <p>{countWords(text)} words and {text.length} characters</p>\r\n        <h2>Time to read:</h2>\r\n        <p>{0.008 * countWords(text)} minutes to read.</p>\r\n        <h2>Preview Texts:</h2>\r\n        <p>{text.length > 0 ? text : \"Enter something in above box!\"}</p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize =(word)=>{\r\n        const lower =word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase()+lower.slice(1);\r\n    }\r\n  return (\r\n    props.alert &&  <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n  <strong>{capitalize(props.alert.type)}</strong> : {props.alert.msg}\r\n  <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button>\r\n</div>\r\n  )\r\n}\r\n\r\nexport default Alert\r\n","import React, { useState } from 'react';\r\nimport './App.css';\r\nimport Navbar from './components/Navbar';\r\nimport TextForm from './components/TextForm';\r\n// import About from './components/About';\r\nimport Alert from './components/Alert';\r\n// import { BrowserRouter as Router, Route, Routes } from 'react-router-dom';\r\n\r\nfunction App() {\r\n  const [mode, setMode] = useState('light'); // State to manage light/dark mode\r\n  const [alert, setAlert] = useState(null);\r\n\r\n  const showAlert = (message, type) => {\r\n    setAlert({\r\n      msg: message,\r\n      type: type\r\n    });\r\n\r\n    setTimeout(() => {\r\n      setAlert(null);\r\n    }, 1500);\r\n  };\r\n\r\n  const toggleMode = () => {\r\n    if (mode === 'light') {\r\n      setMode('dark');\r\n      document.body.style.backgroundColor = '#343a40';\r\n      showAlert(\"Dark mode is enabled\", \"success\");\r\n      document.title = \"Textutils - Dark Mode\";\r\n    } else {\r\n      setMode('light');\r\n      document.body.style.backgroundColor = '#ffffff';\r\n      showAlert(\"Light mode is enabled\", \"success\");\r\n      document.title = \"Textutils - Light Mode\";\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {/* <Router> */}\r\n        <Navbar title=\"Sample\" mode={mode} about=\"About Us\" toggleMode={toggleMode} />\r\n        <div className=\"container my-3\">\r\n          <Alert alert={alert} />\r\n          {/* <Routes> */}\r\n            {/* <Route path=\"/about\" element={<About mode={mode} />} /> */}\r\n            {/* <Route path=\"/\" element={} /> */}\r\n            <TextForm showAlert={showAlert} heading=\"Heading\" mode={mode} />\r\n          {/* </Routes> */}\r\n        </div>\r\n      {/* </Router> */}\r\n    </>\r\n  );\r\n  \r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport process from 'process';\r\n\r\nwindow.process = process;\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}